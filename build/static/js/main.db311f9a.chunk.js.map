{"version":3,"sources":["App.js","serviceWorker.js","comp/Todo.js","index.js"],"names":["App","className","Boolean","window","location","hostname","match","Todo","state","Usertext","list","randomdata","addme","bind","additem","help","del","e","this","setState","target","value","data","items","item","randomtask","Math","floor","random","length","console","log","val","j","i","splice","type","placeholder","onChange","onClick","map","href","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yPAWeA,MARf,WACE,OACE,yBAAKC,UAAU,iCACb,6CCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CC0GSC,G,wDAxHX,aAAc,IAAD,8BACT,gBACKC,MAAM,CACHC,SAAS,GACTC,KAAK,GACLC,WAAW,OAEnB,EAAKC,MAAM,EAAKA,MAAMC,KAAX,gBACX,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBACb,EAAKE,KAAK,EAAKA,KAAKF,KAAV,gBACT,EAAKG,IAAI,EAAKA,IAAIH,KAAT,gBAVD,E,kDAcPI,GAEFC,KAAKC,SAAU,CACPV,SAAUQ,EAAEG,OAAOC,MACnBV,WAAa,U,gCAKrB,GAA2B,MAAxBO,KAAKV,MAAMC,SAAiB,CAC/B,IAAMa,EAAKJ,KAAKV,MAAMC,SAEhBc,EAAM,GAAD,mBAAML,KAAKV,MAAME,MAAjB,CAAsBY,IACjCJ,KAAKC,SAAS,CACVT,KAAOa,EACPd,SAAS,Q,6BAQb,IAAMe,EAAON,KAAKV,MAAME,KAClBe,EAAaD,EAAKE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,SACxDC,QAAQC,IAAIN,GACZP,KAAKC,SAAS,CACVR,WAAWc,M,0BAIfO,GACYd,KAAKV,MAAjB,IACIc,EAAKJ,KAAKV,MAAME,KACpBoB,QAAQC,IAAIT,GAEZ,IADA,IAAIW,EAAE,EACEC,EAAE,EAAEA,EAAEZ,EAAKO,OAAOK,IAEnBZ,EAAKY,KAAKF,IACTF,QAAQC,IAAI,QAAQG,GACpBD,EAAEC,GAIVZ,EAAKa,OAAOF,EAAE,GACdf,KAAKV,MAAME,KAAKY,I,+BAKX,IAAD,OACR,OACI,yBAAKrB,UAAU,+BACP,yBAAKA,UAAU,QACP,yBAAKA,UAAU,2BAAf,gBAGA,yBAAKA,UAAU,yBACV,yBAAKA,UAAU,IACZ,2BAAOA,UAAU,oBAAoBmC,KAAK,OAAOC,YAAY,aAC7DhB,MAAOH,KAAKV,MAAMC,SAClB6B,SAAUpB,KAAKN,QACX,4BACI2B,QAAUrB,KAAKJ,QAAUb,UAAU,+BADvC,SAMZ,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,oBACTiB,KAAKV,MAAME,KAAK8B,KAAK,SAACR,GAAD,OAAU,wBAAI/B,UAAU,YAAY+B,EAC1D,4BACAO,QAAU,kBAAK,EAAKvB,IAAIgB,IAQxBS,KAAK,IAAIxC,UAAU,mCATnB,WAYA,4BAAQwC,KAAK,IAAIxC,UAAU,oCAAoCsC,QAASrB,KAAKH,MAA7E,cAMhB,yBAAKd,UAAU,aACX,wBAAIA,UAAU,2BAAd,cACA,yBAAKA,UAAU,yBACX,4BAAQsC,QAASrB,KAAKH,KAAM0B,KAAK,IAAIxC,UAAU,mBAA/C,WAEA,wBAAIA,UAAU,QACV,wBAAIA,UAAU,cACV,wBAAIA,UAAU,IAAd,OAAsBiB,KAAKV,MAAMG,qB,GA/G9C+B,cCInBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGJC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.db311f9a.chunk.js","sourcesContent":["import React  from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container-fluide App bg-light\">\n      <h1>What to do?</h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n                Usertext:'',\r\n                list:[],\r\n                randomdata:'xxx'\r\n        }\r\n        this.addme=this.addme.bind(this);\r\n        this.additem=this.additem.bind(this);\r\n        this.help=this.help.bind(this);\r\n         this.del=this.del.bind(this);\r\n    \r\n    }\r\n\r\n    addme(e){\r\n        //console.log(input);\r\n        this.setState ({\r\n                Usertext: e.target.value,\r\n                randomdata : 'xxx'\r\n        })\r\n    }\r\n    additem(){\r\n        // e.preventDefault();\r\n        if(this.state.Usertext !== \" \"){\r\n        const data=this.state.Usertext;\r\n        // console.log(data);\r\n        const items=[... this.state.list,data];\r\n        this.setState({\r\n            list : items,\r\n            Usertext:\"\"\r\n        })\r\n        }\r\n        \r\n    }\r\n    help(){\r\n        //console.log(select);\r\n        // e.preventDefault();\r\n        const item = this.state.list;\r\n        const randomtask = item[Math.floor(Math.random() * item.length)];\r\n        console.log(randomtask);\r\n        this.setState({\r\n            randomdata:randomtask,\r\n        })\r\n        // return  <h1>{randomtask}</h1>;\r\n    }\r\n    del(val){\r\n        let state = this.state;\r\n        let data=this.state.list;\r\n        console.log(data);\r\n        var j=0;\r\n        for(var i=0;i<data.length;i++)\r\n        {\r\n            if(data[i]===val){\r\n                console.log(\"match\",i);\r\n                j=i;\r\n            }\r\n        //  console.log(data[i]);   \r\n        }\r\n        data.splice(j,1);\r\n        this.state.list=data;\r\n        // console.log(\"i am delete\",data);\r\n        //window.location.reload();\r\n       // this.additem(\" \"); \r\n    }\r\n    render(){\r\n    return (\r\n        <div className=\" container-fluid hello w-75\">\r\n                <div className=\"card\">\r\n                        <div className=\"card-header text-center\">\r\n                            Make It Easy\r\n                        </div>\r\n                        <div className=\"card-body text-center\">\r\n                             <div className=\"\">\r\n                                <input className=\"form-control mb-2\" type=\"text\" placeholder=\"Enter task\"\r\n                                value={this.state.Usertext}\r\n                                onChange={this.addme}/>\r\n                                    <button \r\n                                        onClick={ this.additem}  className=\"btn btn-primary text-center\">\r\n                                        ADD\r\n                                    </button>\r\n                             </div>\r\n                        </div>\r\n                        <div className=\"card-footer text-muted\">\r\n                            <ul className=\"float-left w-100\">\r\n                                {this.state.list.map( (val)  => <li className=\"raw mt-3\">{val}\r\n                                <button \r\n                                onClick={ ()=> this.del(val)\r\n                                    //this.del(val)\r\n                                    // console.log(\"del\",val)\r\n                                    //  filteredItems=this.state.list.filter(list => val ==true );\r\n                                    // this.state({\r\n                                    //      list : filteredItems\r\n                                    // });\r\n                                 }  \r\n                                href=\"#\" className=\"btn btn-primary-lg  float-right\">Del\r\n                                </button>\r\n                                </li>)}\r\n                                <button href=\"#\" className=\"btn btn-primary  float-right mt-3\" onClick={this.help}>\r\n                                    Refresh\r\n                                </button>\r\n                            </ul>\r\n                        </div>\r\n                </div>\r\n                <div className=\"card mt-5\">\r\n                    <h5 className=\"card-header text-center\">NEED HELP?</h5>\r\n                    <div className=\"card-body text-center\">\r\n                        <button onClick={this.help} href=\"#\" className=\"btn btn-primary\">Help Me\r\n                        </button>\r\n                        <h4 className=\"mt-3\">\r\n                            <ul className=\"float-left\">\r\n                                <li className=\"\">Do: {this.state.randomdata}</li>\r\n                            </ul>\r\n                        </h4>\r\n                    </div>\r\n                </div>\r\n         </div>\r\n    );\r\n }\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  Todo from './comp/Todo';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App/>\n      <Todo/>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}